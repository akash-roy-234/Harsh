# Import required modules
Import-Module Az

# Authenticate using Managed Identity
$AzureContext = Connect-AzAccount -Identity
Connect-MgGraph -Identity

# Set variables
$subscriptionId = "c3212b68-b822-4c28-bfc0-c0d0f0cf9d0"  # Your Subscription ID
$tenantId = "0b6a780e-a9c6-4482-97dc-2aecb06ee1ba"  # Provided Tenant ID
$resourceGroupName = "RG-TERRAFORM-001"  # Resource Group Name
$storageAccountName = "stcrpsbx001dtf"  # Storage Account Name
$containerName = "conditionalaccessip"  # Container Name
$fileName = "ConditionAccessIPs.txt"

# Set the subscription context
Select-AzSubscription -SubscriptionId $subscriptionId

# Function to get Conditional Access policies using Microsoft Graph REST API
function Get-ConditionalAccessPolicy {
    $accessToken = (Get-AzAccessToken -Resource "https://graph.microsoft.com" -TenantId $tenantId).Token
    $uri = "https://graph.microsoft.com/v1.0/identity/conditionalAccess/policies"

    $headers = @{
        Authorization = "Bearer $accessToken"
    }

    $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
    return $response.value
}

# Function to extract IP addresses from Conditional Access policies
function Extract-IPsFromPolicies {
    param (
        $policies
    )
    $ipList = @()
    foreach ($policy in $policies) {
        if ($policy.conditions.applications.includeAllApplications -and $policy.conditions.locations) {
            $locations = $policy.conditions.locations
            if ($locations.includeLocations) {
                $locationIds = $locations.includeLocations
                foreach ($locationId in $locationIds) {
                    # API call to get named location details
                    $accessToken = (Get-AzAccessToken -Resource "https://graph.microsoft.com" -TenantId $tenantId).Token
                    $uri = "https://graph.microsoft.com/v1.0/identity/conditionalAccess/namedLocations/$locationId"
                    $headers = @{
                        Authorization = "Bearer $accessToken"
                    }
                    $namedLocation = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
                    if ($namedLocation["@odata.type"] -eq "#microsoft.graph.ipNamedLocation") {
                        $ipList += $namedLocation.ipRanges
                    }
                }
            }
        }
    }
    return $ipList
}

# Function to store IPs in the Storage Account
function Store-IPsInStorageAccount {
    param (
        $ipList,
        $storageAccountName,
        $containerName,
        $fileName
    )
    
    # Get Storage Account Key using Managed Identity
    $storageAccountKey = (Get-AzStorageAccountKey -ResourceGroupName $resourceGroupName -Name $storageAccountName).Value[0]
    
    # Create a storage context
    $context = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey
    
    # Create a blob container if it doesn't exist
    $container = Get-AzStorageContainer -Context $context -Name $containerName -ErrorAction SilentlyContinue
    if (-not $container) {
        $container = New-AzStorageContainer -Context $context -Name $containerName
    }
    
    # Write IPs to a file
    $filePath = "$env:TEMP\$fileName"
    $ipList | Out-File -FilePath $filePath
    
    # Upload the file to the blob container
    Set-AzStorageBlobContent -File $filePath -Container $containerName -Blob $fileName -Context $context
}

# Main logic
$policies = Get-ConditionalAccessPolicy
$ipList = Extract-IPsFromPolicies -policies $policies

if ($ipList.Count -gt 0) {
    Store-IPsInStorageAccount -ipList $ipList -storageAccountName $storageAccountName -containerName $containerName -fileName $fileName
    Write-Host "IP addresses have been successfully extracted and stored in the Storage Account."
} else {
    Write-Host "No IP addresses found in Conditional Access policies."
}
